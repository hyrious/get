{"version":3,"file":"index.0a0e44fe.js","sources":["../../vite/modulepreload-polyfill","../../main.ts"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","let db: { id: string, kw: string[], url: string, src: 'scoop' | 'winget' }[] | undefined;\n\nconst CHUNK = 20\nlet current = 0, maxsize = CHUNK;\n\nconst $: typeof document.querySelector = (sel: string) => document.querySelector(sel)\n\nconst $winget: HTMLInputElement = $('#winget')\nconst $scoop: HTMLInputElement = $('#scoop')\nconst $search: HTMLInputElement = $('#search')\nconst $result = $('#result')\nconst $template: HTMLTemplateElement = $('#result-item-template')\nconst $more: HTMLButtonElement = $('#more')\n\ncustomElements.define('result-item', class extends HTMLElement {\n  constructor() {\n    super()\n    this.attachShadow({ mode: 'open' })\n        .append($template.content.cloneNode(true))\n  }\n})\n\nlet raf = 0, cursor = 0;\n\nfunction reset() {\n  current = cursor = 0\n  maxsize = CHUNK\n  $result.innerHTML = ''\n  $more.disabled = true\n}\n\nfunction h(tag: string, attrs: object) {\n  return Object.assign(document.createElement(tag), attrs);\n}\n\nasync function refresh() {\n  if (current < maxsize) {\n    current += CHUNK\n    raf = requestAnimationFrame(refresh)\n  }\n\n  let i = 0\n  const winget = $winget.checked, scoop = $scoop.checked\n  const hint = $search.value.toLowerCase().split(/\\s+/)\n  while (cursor < db.length && i < CHUNK) {\n    let { id, kw, url, src } = db[cursor++]\n    if (src === \"scoop\" && !scoop) continue;\n    if (src === \"winget\" && !winget) continue;\n    if (hint.some(k => kw.some(e => e.toLowerCase().includes(k)))) {\n      let dom = document.createElement('result-item')\n      dom.append(\n        h('span', { slot: 'id', textContent: id }),\n        h('span', { slot: 'kw', textContent: kw.join(',') }),\n        h('span', { slot: 'src', textContent: src }),\n        h('a', { slot: 'url', textContent: url, href: url }),\n      )\n      $result.append(dom)\n      i++\n    }\n  }\n\n  $more.disabled = !(cursor < db.length)\n}\n\nfunction search() {\n  reset()\n  cancelAnimationFrame(raf)\n  raf = requestAnimationFrame(refresh)\n}\n\nfunction more() {\n  maxsize += CHUNK\n  raf = requestAnimationFrame(refresh)\n}\n\nasync function main() {\n  $search.disabled = true\n\n  db = await fetch(\"db.json\").then(r => r.json())\n\n  $search.disabled = false\n  $search.placeholder = \"search here\"\n  $search.focus()\n\n  $search.addEventListener('input', search)\n\n  $more.addEventListener('click', more)\n  $winget.addEventListener('change', search)\n  $scoop.addEventListener('change', search)\n}\n\nmain()\n\nif (import.meta.env.DEV)\n  navigator.serviceWorker?.getRegistrations().then(r => {\n    r.forEach(e => e.unregister())\n  })\n"],"names":[],"mappings":"AAAA,KAAM,GAAI,UAAoB,CAC1B,KAAM,GAAU,SAAS,cAAc,QAAQ,QAC/C,GAAI,GAAW,EAAQ,UAAY,EAAQ,SAAS,iBAChD,OAEJ,SAAW,KAAQ,UAAS,iBAAiB,6BACzC,EAAe,GAEnB,GAAI,kBAAiB,AAAC,GAAc,CAChC,SAAW,KAAY,GACnB,GAAI,EAAS,OAAS,YAGtB,SAAW,KAAQ,GAAS,WACxB,AAAI,EAAK,UAAY,QAAU,EAAK,MAAQ,iBACxC,EAAe,KAG5B,QAAQ,SAAU,CAAE,UAAW,GAAM,QAAS,KACjD,WAAsB,EAAQ,CAC1B,KAAM,GAAY,GAClB,MAAI,GAAO,WACP,GAAU,UAAY,EAAO,WAC7B,EAAO,gBACP,GAAU,eAAiB,EAAO,gBACtC,AAAI,EAAO,cAAgB,kBACvB,EAAU,YAAc,UACvB,AAAI,EAAO,cAAgB,YAC5B,EAAU,YAAc,OAExB,EAAU,YAAc,cACrB,EAEX,WAAwB,EAAM,CAC1B,GAAI,EAAK,GAEL,OACJ,EAAK,GAAK,GAEV,KAAM,GAAY,EAAa,GAC/B,MAAM,EAAK,KAAM,KAEvB,AAAoB,IC1CtB,GAAI,GAEJ,KAAM,GAAQ,GACd,GAAI,GAAU,EAAG,EAAU,EAE3B,KAAM,GAAmC,AAAC,GAAgB,SAAS,cAAc,GAE3E,EAA4B,EAAE,WAC9B,EAA2B,EAAE,UAC7B,EAA4B,EAAE,WAC9B,EAAU,EAAE,WACZ,EAAiC,EAAE,yBACnC,EAA2B,EAAE,SAEnC,eAAe,OAAO,cAAe,aAAc,YAAY,CAC7D,aAAc,cAEP,aAAa,CAAE,KAAM,SACrB,OAAO,EAAU,QAAQ,UAAU,QAI5C,GAAI,GAAM,EAAG,EAAS,EAEtB,YAAiB,GACL,EAAS,IACT,IACF,UAAY,KACd,SAAW,GAGnB,WAAW,EAAa,EAAe,OAC9B,QAAO,OAAO,SAAS,cAAc,GAAM,GAGpD,kBAAyB,CACnB,EAAU,OACD,IACL,sBAAsB,OAG1B,GAAI,OACF,GAAS,EAAQ,QAAS,EAAQ,EAAO,QACzC,EAAO,EAAQ,MAAM,cAAc,MAAM,YACxC,EAAS,EAAG,QAAU,EAAI,GAAO,IAClC,CAAE,KAAI,KAAI,MAAK,OAAQ,EAAG,QAC1B,MAAQ,SAAW,CAAC,IACpB,MAAQ,UAAY,CAAC,IACrB,EAAK,KAAK,GAAK,EAAG,KAAK,GAAK,EAAE,cAAc,SAAS,KAAM,IACzD,GAAM,SAAS,cAAc,iBAC7B,OACF,EAAE,OAAQ,CAAE,KAAM,KAAM,YAAa,IACrC,EAAE,OAAQ,CAAE,KAAM,KAAM,YAAa,EAAG,KAAK,OAC7C,EAAE,OAAQ,CAAE,KAAM,MAAO,YAAa,IACtC,EAAE,IAAK,CAAE,KAAM,MAAO,YAAa,EAAK,KAAM,OAExC,OAAO,UAKb,SAAW,IAAW,EAAG,QAGjC,YAAkB,0BAEK,KACf,sBAAsB,GAG9B,YAAgB,IACH,IACL,sBAAsB,GAG9B,kBAAsB,GACZ,SAAW,KAEd,KAAM,OAAM,WAAW,KAAK,GAAK,EAAE,UAEhC,SAAW,KACX,YAAc,gBACd,UAEA,iBAAiB,QAAS,KAE5B,iBAAiB,QAAS,KACxB,iBAAiB,SAAU,KAC5B,iBAAiB,SAAU,GAGpC"}